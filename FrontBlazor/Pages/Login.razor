@page "/login"
@using FrontBlazor.Models
@using FrontBlazor.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation


<PageTitle>Iniciar Sesión</PageTitle>

<div class="login-container">
    <div class="login-card">
        <h2>Iniciar Sesión</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="username">Usuario:</label>
                <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>

            <div class="form-group">
                <label for="password">Contraseña:</label>
                <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Cargando...</span>
                }
                else
                {
                    <span>Iniciar Sesión</span>
                }
            </button>
        </EditForm>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
    }

    .login-card {
        width: 100%;
        max-width: 400px;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        background-color: white;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }

    .btn-primary {
        width: 100%;
        margin-top: 1rem;
        padding: 0.5rem;
        background-color: #0d6efd;
        border: none;
        border-radius: 4px;
        color: white;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #0b5ed7;
        }

    .alert {
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border-radius: 4px;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
    }
</style>

@code {
    private LoginRequest loginModel = new();
    private string? errorMessage;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Redirigir si ya está autenticado
        if (await AuthService.IsAuthenticated())
        {
            Navigation.NavigateTo("/dashboard");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var result = await AuthService.Login(loginModel);

            if (result.Success)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = result.Message ?? "Error de autenticación. Verifique sus credenciales.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
